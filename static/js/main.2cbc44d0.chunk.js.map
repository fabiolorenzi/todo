{"version":3,"sources":["components/TodoForm.jsx","components/TodoFormChange.jsx","components/Todo.jsx","components/TodoList.jsx","App.js","index.js"],"names":["TodoForm","props","useState","input","setInput","className","onSubmit","e","preventDefault","id","Math","floor","random","text","type","placeholder","value","name","onChange","target","TodoFormChange","Todo","todos","completeTodo","removeTodo","updateTodo","edit","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2cbc44d0.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(\"\");\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 1000000),\r\n            text: input\r\n        })\r\n\r\n        setInput(\"\");\r\n    };\r\n\r\n    return (\r\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Add something to do\"\r\n                value={input}\r\n                name=\"text\"\r\n                className=\"todo-input\"\r\n                onChange={handleChange}\r\n            />\r\n            <button className=\"todo-button\">Add</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default TodoForm;","import React, {useState} from \"react\";\r\n\r\nfunction TodoFormChange(props) {\r\n    const [input, setInput] = useState(\"\");\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 100000),\r\n            text: input\r\n        });\r\n\r\n        setInput(\"\");\r\n    };\r\n\r\n    return (\r\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={input}\r\n                placeholder=\"Change here\"\r\n                name=\"text\"\r\n                className=\"todo-input\"\r\n                onChange={handleChange}\r\n            />\r\n            <button className=\"todo-button\">Modify</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default TodoFormChange;","import React, {useState} from \"react\";\r\nimport TodoFormChange from \"./TodoFormChange.jsx\";\r\nimport {RiCloseCircleLine} from \"react-icons/ri\";\r\nimport {TiEdit} from \"react-icons/ti\";\r\n\r\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: \"\"\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value)\r\n        setEdit({\r\n            id: null,\r\n            value: \"\"\r\n        })\r\n    };\r\n\r\n    if (edit.id) {\r\n        return <TodoFormChange edit={edit} onSubmit={submitUpdate} />;\r\n    };\r\n\r\n    return todos.map((todo, index) => (\r\n        <div className={todo.isComplete ? \"todo-row complete\" : \"todo-row\"} key={index}>\r\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                <div className=\"todo-text\">\r\n                    {todo.text}\r\n                </div>\r\n            </div>\r\n            <div className=\"icons\">\r\n                <RiCloseCircleLine\r\n                    onClick={() => removeTodo(todo.id)}\r\n                    className=\"delete-icon\"\r\n                />\r\n                <TiEdit\r\n                    onClick={() => setEdit({ id: todo.id, value: todo.text})}\r\n                    className=\"edit-icon\"\r\n                />\r\n            </div>\r\n        </div>\r\n    ));\r\n};\r\n\r\nexport default Todo;","import React, {useState} from \"react\";\r\nimport TodoForm from \"./TodoForm.jsx\";\r\nimport Todo from \"./Todo.jsx\";\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const addTodo = todo => {\r\n        if (!todo.text) {\r\n            return\r\n        }\r\n\r\n        const newTodos = [todo, ...todos];\r\n\r\n        setTodos(newTodos);\r\n    };\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n        if (!newValue.text) {\r\n            return\r\n        }\r\n\r\n        setTodos(prev => prev.map (item => (item.id === todoId ? newValue : item)))\r\n    };\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id);\r\n\r\n        setTodos(removeArr);\r\n    };\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        })\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <h1>What do you have to do?</h1>\r\n            <TodoForm onSubmit={addTodo} />\r\n            <Todo\r\n                todos={todos}\r\n                completeTodo={completeTodo}\r\n                removeTodo={removeTodo}\r\n                updateTodo={updateTodo}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import React from \"react\";\r\n\r\nimport TodoList from \"./components/TodoList.jsx\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div id=\"todo-app\">\r\n            <TodoList />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\nimport App from \"./App.js\";\r\nimport \"./style.css\";\r\n\r\nReactDOM.render (\r\n    <Router>\r\n        <App />\r\n    </Router>,\r\n    document.getElementById(\"app\")\r\n);"],"sourceRoot":""}